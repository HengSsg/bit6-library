package DAO;

import DB.ConnectionManager;
import DTO.BookDTO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BookDAO {

	// 책 제목으로 조회
	Connection conn = ConnectionManager.getConnection();

	public List<BookDTO> bookSelectTitle(String bname) {

		String sql = "SELECT  b.no, bname, bwriter, bpublisher "
				+ "FROM book b "
				+ "JOIN rent_book rb "
				+ "ON b.no = rb.no "
				+ "WHERE bname LIKE ?";

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<BookDTO> listBook = new ArrayList<>();

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, "%" + bname + "%");
			pstmt.setString(2, "rentYn");

			rs = pstmt.executeQuery();
			while(rs.next()) {
				BookDTO b = new BookDTO();

				b.setNo(rs.getInt("no"));
				b.setBname(rs.getString("bname"));
				b.setBwriter(rs.getString("bwriter"));
				b.setBpublisher(rs.getString("bpublisher"));
				
	            int rentYn = rs.getInt("rentYn");
	            
	            if(rentYn == 1) {
	            	System.out.print("======================들엉");
	            	b.setRentMsg("대출중");
	            	System.out.print(b.getRentMsg());
	            } else {
	            	b.setRentMsg("대출 가능");
	            }
	            
				listBook.add(b);

			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null | pstmt != null | conn != null) {
				try {
					rs.close();
					pstmt.close();
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return listBook;
	}


	// 책 저자로 조회
	public List<BookDTO> bookSelectWriter(String bwriter) {
		Connection conn = ConnectionManager.getConnection();

		String sql = "SELECT no, bname, bwriter, bpublisher FROM book "
				+ "WHERE bwriter like ? ";


		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<BookDTO> listBook = new ArrayList<>();

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, "%" + bwriter + "%");

			rs = pstmt.executeQuery();
			while(rs.next()) {
				BookDTO b = new BookDTO();
				
				b.setNo(rs.getInt("no"));
				b.setBname(rs.getString("bname"));
				b.setBwriter(rs.getString("bwriter"));
				b.setBpublisher(rs.getString("bpublisher"));

				listBook.add(b);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null | pstmt != null | conn != null) {
				try {
					rs.close();
					pstmt.close();
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return listBook;
	}


	// 출판사로 조회
	public List<BookDTO> bookSelectPublisher(String bpublisher) {
		Connection conn = ConnectionManager.getConnection();

		String sql = "SELECT no, bname, bwriter, bpublisher FROM book "
				+ "WHERE bpublisher like ?";

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<BookDTO> listBook = new ArrayList<>();

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, "%" + bpublisher + "%");

			rs = pstmt.executeQuery();
			while(rs.next()) {
				BookDTO b = new BookDTO();
				
				b.setNo(rs.getInt("no"));
				b.setBname(rs.getString("bname"));
				b.setBwriter(rs.getString("bwriter"));
				b.setBpublisher(rs.getString("bpublisher"));

				listBook.add(b);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null | pstmt != null | conn != null) {
				try {
					rs.close();
					pstmt.close();
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return listBook;
	}


	//  도서의 상태를 확인
	public List<BookDTO> bookState() {
		Connection conn = ConnectionManager.getConnection();

		String result = "";
		String sql = "SELECT b.*, rb.rentYn "
				+ "FROM book b "
				+ "JOIN rent_book rb "
				+ "ON b.no = rb.no ";

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		List<BookDTO> bookList = new ArrayList<>();
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			while (rs.next()) {
	            BookDTO book = new BookDTO();
	            book.setBname(rs.getString("bname"));
	            book.setBwriter(rs.getString("bwriter"));
	            book.setBpublisher(rs.getString("bpublisher"));
	         
	            int rentYn = rs.getInt("rentYn");
	            System.out.print(rs.getInt("rentYn"));
	            if(rentYn == 1) {
	            	System.out.print("======================들엉");
	            	book.setRentMsg("대출중");
	            	System.out.print(book.getRentMsg());
	            } else {
	            	book.setRentMsg("대출 가능");
	            }

	            bookList.add(book);
	        }

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null || pstmt != null || conn != null) {
				try {
					rs.close();
					pstmt.close();
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return bookList;
	}
	
	// 최다 도서 대출 조회
    public String getMostBorrowedBookName() {
        Connection conn = ConnectionManager.getConnection();
        
        String mostBorrowedBookName = "";
        
         String sql = "SELECT b.bname " +
                  "FROM rent_book r " +
                  "JOIN book b ON r.book_no = b.no " +
                  "GROUP BY r.book_no " +
                  "ORDER BY COUNT(*) DESC " +
                  "LIMIT 1";
         
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                mostBorrowedBookName = rs.getString("bname");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (rs != null || pstmt != null || conn != null) {
                try {
                    rs.close();
                    pstmt.close();
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        
        }
        
         return mostBorrowedBookName;
    }
}